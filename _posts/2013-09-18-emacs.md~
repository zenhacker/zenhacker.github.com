---
layout: post
title: "我的emacs配置"
description: ""
category: Emacs
tags: [Emacs, Linux]
---
{% include JB/setup %}

{% highlight cl %}
;;===========================================================================
;;                     Author:Xiangzeng Zhou(周祥增)
;;                           Date:2013-08-25
;;                        Update Date:2013-08-25
;;===========================================================================

;;===========================================================================
;;============================= Common ======================================
;;===========================================================================
;设置默认工作目录
(setq default-directory "~/work/")

;不产生备份文件
(setq make-backup-files nil)

;不生成临时文件
(setq-default make-backup-files nil)
;;===========================================================================
;;============================ Load Path ====================================
;;===========================================================================
;添加Emacs搜索路径(之后相应的插件脚本就可以用require代替load-file命令了)
(add-to-list 'load-path "~/emacs-lisp/lib")

(add-to-list 'load-path "~/emacs-lisp/lib/cedet-1.0/semantic")
(add-to-list 'load-path "~/emacs-lisp/lib/cedet-1.0/common")
(add-to-list 'load-path "~/emacs-lisp/lib/cedet-1.0/speedbar")
(add-to-list 'load-path "~/emacs-lisp/lib/cedet-1.0/eieio")
(add-to-list 'load-path "~/emacs-lisp/lib/cedet-1.0/semantic")

(add-to-list 'load-path "~/emacs-lisp/lib/ecb-2.40")

(add-to-list 'load-path "~/emacs-lisp/lib/yasnippet-0.6.1c")

(add-to-list 'load-path "~/emacs-lisp/lib/codepilot")

(add-to-list 'load-path "~/emacs-lisp/lib/emacs-eclim")

(add-to-list 'load-path "~/emacs-lisp/lib/icicles")

(add-to-list 'load-path "~/emacs-lisp/lib/gnuserv")
;;===========================================================================
;;============================= Editing =====================================
;;===========================================================================
;闪屏报警
(setq visible-bell t)

;使用y or n提问代替yes or no
(fset 'yes-or-no-p 'y-or-n-p)

;高亮显示成对括号
(show-paren-mode t)
(setq show-paren-style 'parentheses)

;#高亮显示区域选择
(transient-mark-mode t)

;拼写检查
(setq-default ispell-program-name "aspell")

;开启语法高亮。
(global-font-lock-mode 1)
;增加更丰富的高亮
(require 'generic-x)

;只渲染当前屏幕语法高亮，加快显示速度
(setq lazy-lock-defer-on-scrolling t)
(setq font-lock-maximum-decoration t)

;开启ido-mode(用C-x C-f打开文件的时候在后面有提示)
(ido-mode t)

;设置scroll-margin 3(靠近屏幕边沿3行时就开始滚屏)
(setq scroll-margin 3  scroll-conservatively 10000)

;#允许emacs和外部其他程序的粘贴
(setq x-select-enable-clipboard t)

;#自动在文件末增加一个新行
(setq require-final-newline t)

;#当光标在行尾上下移动的时候，始终保持在行尾
(setq track-eol t)

;#当浏览man page时，直接跳转到man buffer
(setq Man-notify-method 'pushy)

;#按C-n或向下键时不添加新行
(setq next-line-add-newlines nil)

;使用空格缩进代替tab缩进(可以避免很多错误)
;(setq indent-tabs-mode nil)
;(setq tab-always-indent nil)
;(setq tab-width 4)
;(setq-default indent-tabs-mode nil)
;(setq default-tab-width 4)
;(setq tab-stop-list())
;(loop for x downfrom 40 to 1 do
;  (setq tab-stop-list (cons (* x 4) tab-stop-list)))

;按下shift拖拽鼠标即可选择矩形区域
(require 'rect-mark)
(define-key ctl-x-map "r\C-@" 'rm-set-mark)
(define-key ctl-x-map [?r ?\C-\ ] 'rm-set-mark)
(define-key ctl-x-map "r\C-x" 'rm-exchange-point-and-mark)
(define-key ctl-x-map "r\C-w" 'rm-kill-region)
(define-key ctl-x-map "r\M-w" 'rm-kill-ring-save)
(define-key global-map [S-down-mouse-1] 'rm-mouse-drag-region)
(autoload 'rm-set-mark "rect-mark"
  "Set mark for rectangle." t)
(autoload 'rm-exchange-point-and-mark "rect-mark"
  "Exchange point and mark for rectangle." t)
(autoload 'rm-kill-region "rect-mark"
  "Kill a rectangular region and save it in the kill ring." t)
(autoload 'rm-kill-ring-save "rect-mark"
  "Copy a rectangular region to the kill ring." t)
(autoload 'rm-mouse-drag-region "rect-mark"
  "Drag out a rectangular region with the mouse." t)
(add-hook 'picture-mode-hook 'rm-example-picture-mode-bindings)
(autoload 'rm-example-picture-mode-bindings "rect-mark"
  "Example rect-mark key and mouse bindings for picture mode.")

;中文输入。必须安装了ibus，然后使用C+\切换输入法
(set-language-environment 'Chinese-GB)
(set-keyboard-coding-system 'euc-cn)
(set-clipboard-coding-system 'euc-cn)
(set-terminal-coding-system 'euc-cn)
(set-buffer-file-coding-system 'euc-cn)
(set-selection-coding-system 'euc-cn)
(modify-coding-system-alist 'process "*" 'euc-cn)
(setq default-process-coding-system
            '(euc-cn . euc-cn))
(setq-default pathname-coding-system 'euc-cn)
;;===========================================================================
;;============================== Outlook ====================================
;;===========================================================================
;设置字体大小，默认是Monospace
(set-default-font "-unknown-Mono-normal-normal-*-15-*-*-*-m-0-iso10646-1")

;显示行号
(require 'setnu)
;当进入text-mode时，自动显示行号
;(add-hook 'text-mode-hook 'turn-on-setnu-mode) 


;去掉滚动条
(set-scroll-bar-mode nil)

;禁用工具栏
(tool-bar-mode nil)

;禁用菜单栏
;(menu-bar-mode nil)

;关闭开启时信息
(setq inhibit-startup-message t)

;颜色主题(Color-theme)
;(require 'color-theme)
;(color-theme-euphoria)
;(color-theme-subtle-hacker)
;(color-theme-robin-hood)

;设置启动主模式是text,并进入auto-fill次模式(默认是fundamental-mode)
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-auto-fill) 

;启用tabbar
(require 'tabbar)
(tabbar-mode)
;(global-set-key (kbd "s-3") 'tabbar-backward-group)
;(global-set-key (kbd "s-4") 'tabbar-forward-group)
;(global-set-key (kbd "s-1") 'tabbar-backward)
;(global-set-key (kbd "s-2") 'tabbar-forward)
;新建default组
;(load "tabbar-group")

;智能改变光标形状
(require 'cursor-change)
(cursor-change-mode 1)
;可以把光标由方块变成一个小长条
(require 'bar-cursor)

;启动时的大小和屏幕位置
;(setq default-frame-alist
;  '((height . 9999)(width . 9999)(menubar-lines . 20)(tool-bar-lines . 0)))

;使用ibuffer查看bufer
(require 'ibuffer)
(global-set-key ( kbd "C-x C-b")' ibuffer)

;buffer name
(load "shell-buffer.el")

;配置reStructuredText工具
(require 'rst)
(add-hook 'text-mode-hook 'rst-text-mode-bindings)
(setq auto-mode-alist
  (append '(("\\.rst$" . rst-mode)
    ("\\.rest$" . rst-mode)) auto-mode-alist))
(add-hook 'rst-adjust-hook 'rst-toc-insert-update)
;;===========================================================================
;;============================= Plugin Setting ==============================
;;===========================================================================
;-------------------------------- [Auctex] ----------------------------------
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
(setq-default TeX-master "master")
(mapc (lambda (mode)
	(add-hook 'LaTex-mode-hook mode))
	(list 'auto-fill-mode
	      'LaTeX-math-mode
	      'turn-on-reftex
	      'linum-mode))
(add-hook 'LaTeX-mode-hook
	(lambda ()
	  (setq TeX-auto-untabify t
		TeX-engine 'xetex
		TeX-show-compilation t)
	  (TeX-global-PDF-mode t)
	  (setq TeX-save-query nil)
	  (imenu-add-menubar-index)
	  (define-key LaTeX-mode-map (kbd "TAB") 'TeX-complete-symbol)))
(setq TeX-source-correlate-mode t
	TeX-source-correlate-mode 'synctex)

;---------------------------------- [gdb] -----------------------------------
;GDB-UI配置(在emacs中调用gdb时显示多个有用的窗口)
(setq gdb-many-windows t)
(load-library "multi-gud.el")
(load-library "multi-gdb-ui.el")

;--------------------------------- [cedet] ----------------------------------
;加载cedet
(require 'cedet)

;开启EDE(即项目管理)特性
(global-ede-mode 1)

;开启Semantic(代码分析,智能补全等)特性
;;(global-srecode-minor-mode 1) ; Enable SRecode (Template management) minor-mode 
(semantic-load-enable-minimum-features) ;This enables the database and idle reparse engines
(semantic-load-enable-code-helpers) ;This enables summary mode imenu support, and the semantic navigator
;;(semantic-load-enable-guady-code-helpers) 
;;(semantic-load-enable-excessive-code-helpers)
(semantic-load-enable-semantic-debugging-helpers)

;配置Semantic搜索范围
(setq semanticdb-project-roots
  (list
  (expand-file-name "/")))

;代码折叠
(require 'semantic-tag-folding nil 'noerror)
(global-semantic-tag-folding-mode 1)
;折叠和打开整个buffer的所有代码
(define-key semantic-tag-folding-mode-map (kbd "C--") 'semantic-tag-folding-fold-all)
(define-key semantic-tag-folding-mode-map (kbd "C-=") 'semantic-tag-folding-show-all)
;折叠和打开单个buffer的所有代码
(define-key semantic-tag-folding-mode-map (kbd "C-_") 'semantic-tag-folding-fold-block)
(define-key semantic-tag-folding-mode-map (kbd "C-+") 'semantic-tag-folding-show-block)

;光标在停留在.或者->后面停一会，会自动补全成员名称
(global-semantic-idle-completions-mode 1)

;(defun my-semantic-hook()
;  (imenu-add-to-menubar "TAGSS"))
;(add-hook 'semantic-init-hooks 'my-semantic-hook)

;开启可视化书签功能
(enable-visual-studio-bookmarks)

;h/cpp切换
(require 'eassist nil 'noerror)
;----------------------------------- [ecb] ----------------------------------
;加载ecb
(require 'ecb)

;自动加载ecb
(require 'ecb-autoloads)

;不自动启动ecb,并且不显示每日提示
;(setq ecb-auto-activate t)
(setq ecb-tip-of-the-day nil)

(require 'cc-mode)
(c-set-offset 'inline-open 0)
(c-set-offset 'friend '-)
(c-set-offset 'substatement-open 0)

(defun my-c-mode-common-hook()
  (setq tab-width 4 indent-tabs-mode nil)
  ;;; hungry-delete and auto-newline
;;  (c-toggle-auto-hungry-state 1)
  (define-key c-mode-base-map [(control \`)] 'hs-toggle-hiding)
  (define-key c-mode-base-map [(return)] 'newline-and-indent)

  (define-key c-mode-base-map [(meta \`)] 'c-indent-command)
;;  (define-key c-mode-base-map [(tab)] 'hippie-expand)
;;  (define-key c-mode-base-map [(tab)] 'my-indent-or-complete)
;;  (define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)
  ;;预处理设置
  (setq c-macro-shrink-window-flag t)
  (setq c-macro-preprocessor "cpp")
  (setq c-macro-cppflags " ")
  (setq c-macro-prompt-flag t)
  (setq hs-minor-mode t)
  (setq abbrev-mode t)
)

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(defun my-c++-mode-hook()
  (setq tab-width 4 indent-tabs-mode nil)
  (c-set-style "stroustrup")
;;(define-key c++-mode-map [f3] 'replace-regexp)
)

;自定义补全命令，如果单词在中间就补全，否则就tab
(defun my-indent-or-complete()
  (interactive)
  (if (looking-at "\\>")
	  (hippie-expand nil)
	  (indent-for-tab-command))
  )

;补全快捷键,ctrl+tab用senator补全,不显示列表,alt+/补全,显示列表让选择
(global-set-key [(control tab)] 'my-indent-or-complete)
(define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)
(autoload 'senator-try-expand-semantic "senator")
(setq hippie-expand-try-functions-list
  '(senator-try-expand-semantic
    try-expand-dabbrev
    try-expand-dabbrev-visible
    try-expand-dabbrev-all-buffers
    try-expand-dabbrev-from-kill
    try-expand-list
    try-expand-list-all-buffers
    try-expand-line
    try-expand-line-all-buffers
    try-complete-file-name-partially
    try-complete-file-name
    try-expand-whole-kill))

;-------------------------------- [cscope] ----------------------------------
(require 'xcscope)

;------------------------------- [YASnippet] --------------------------------
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/emacs-lisp/lib/yasnippet-0.6.1c/snippets")

;------------------------------- [ESS] --------------------------------------
;(setq ess-eval-visibly-p nil)
(setq ess-ask-for-ess-directory nil)
(require 'ess-eldoc)

(setq ess-ask-for-ess-directory nil)
(setq ess-local-process-name "R")
(setq ansi-color-for-comint-mode 'filter)
(setq comint-scroll-to-bottom-on-input t)
(setq comint-scroll-to-bottom-on-output t)
(setq comint-move-point-for-output t)

(defun my-ess-start-R ()
  (interactive)
  (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
	  (progn
		(delete-other-windows)
		(setq w1 (selected-window))
		(setq w1name (buffer-name))
		(setq w2 (split-window w1 nil t))
		(R)
		(set-window-buffer w2 "*R*")
		(set-window-buffer w1 w1name))))

(defun my-ess-eval ()
  (interactive)
  (my-ess-start-R)
  (if (and transient-mark-mode mark-active)
	  (call-interactively 'ess-eval-region)
	(call-interactively 'ess-eval-line-and-step)))

(add-hook 'ess-mode-hook
		  '(lambda()
			 (local-set-key [(shift return)] 'my-ess-eval)))

(add-hook 'inferior-ess-mode-hook
		  '(lambda()
			 (local-set-key [C-up] 'comint-previous-input)
			 (local-set-key [C-down] 'comint-next-input)))

(add-hook 'Rnw-mode-hook
		  '(lambda()
			 (local-set-key [(shift return)] 'my-ess-eval)))

(require 'ess-site)

;(require 'ac-R)

;(require 'ess-tracebug)
;(add-hook 'ess-post-run-hook 'ess-tracebug t)
;(define-key ess-mode-map "\M-]" 'next-error)
;(define-key ess-mode-map "\M-[" 'previous-error)
;(define-key inferior-ess-mode-map "\M-]" 'next-error-no-select)
;(define-key inferior-ess-mode-map "\M-[" 'previous-error-no-select)


;;===========================================================================
;;============================ General Key-binding ==========================
;;===========================================================================
;撤销(Undo)
(global-set-key (kbd "C-z") 'undo)

;重做(Redo)
(require 'redo)
(global-set-key (kbd "C-.") 'redo)

;跳转到行
(global-set-key (kbd "M-g") 'goto-line)

;取消ctrl+<space>键的mark set
(global-set-key (kbd "C-SPC") 'nil)
;设置ctrl+alt+<space>为mark set
(global-set-key (kbd "C-M-SPC") 'set-mark-command)

;指向buffer开头
(global-set-key [home] 'beginning-of-buffer)
;指向buffer结尾
(global-set-key [end] 'end-of-buffer)

;切换到其他窗口
(global-set-key (kbd "M-o") 'other-window)
;关闭当前buffer
(global-set-key (kbd "M-0") 'kill-this-buffer)
;关闭其他窗口
(global-set-key (kbd "M-1") 'delete-other-windows)
;水平分割窗口
(global-set-key (kbd "M-2") 'split-window-vertically)
;垂直分割窗口
(global-set-key (kbd "M-3") 'split-window-horizontally)
;关闭当前窗口
(global-set-key (kbd "M-4") 'delete-window)

;man
(global-set-key [f1] 'manual-entry)

;info
(global-set-key [C-f1] 'info )

;当开启cedet的enable-visual-studio-bookmarks时，F2相关的快捷键将会被定义。这里不再定义以免覆盖
;F2 在当前行设置或取消书签
;C-F2 查找下一个书签
;S-F2 查找上一个书签
;C-S-F2 清空当前文件的所有书签


;查找字符串
(global-set-key [f3] 'grep-find)

;获取Speedbar焦点
(global-set-key [f4] 'speedbar-get-focus)

;调用gdb
(global-set-key [f5] 'gdb)

;显示/隐藏工具栏
(global-set-key [f6] 'tool-bar-mode)
;显示/隐藏菜单栏
(global-set-key [C-f6] 'menu-bar-mode)

;设置编译命令
;(setq-default compile-command "make")
(setq-default compile-command "gcc -g ")
(defun du-onekey-compile ()
  "Save buffers and start compile"
  (interactive)
  (save-some-buffers t)
  (switch-to-buffer-other-window "*compilation*")
  (compile compile-command))
;编译
(global-set-key [f7] 'compile)
;保存所有文件然后编译当前窗口文件
(global-set-key [C-f7] 'du-onekey-compile)

;在emacs中调用shell
(defun open-eshell-other-buffer ()
  "Open eshell in other buffer"
  (interactive)
  (split-window-vertically)
  (eshell))
(defun my-eshell-clear-buffer ()
  "Eshell clear buffer."
  (interactive)
  (let ((eshell-buffer-maximum-lines 0))
    (eshell-truncate-buffer)))
;另开一个buffer并打开shell
(global-set-key [f8] 'open-eshell-other-buffer)
;在当前的buffer打开shell
(global-set-key [C-f8] 'eshell)
;清空shell
(global-set-key [S-f8] 'my-eshell-clear-buffer)

;调用dired命令
(global-set-key [C-f9] 'dired)
;在其他窗口之间旋转
(global-set-key [f9] 'other-window)

;日历系统
(global-set-key [f10] 'calendar) 
;快速察看日程安排
(global-set-key [C-f10] 'list-bookmarks)

;激活ecb
(global-set-key [f11] 'ecb-activate)
;隐藏和显示ecb窗口
(global-set-key [M-f11] 'ecb-hide-ecb-windows)
(global-set-key [C-f11] 'ecb-show-ecb-windows)
;ecb窗口间切换
(global-set-key [M-left] 'windmove-left)
(global-set-key [M-right] 'windmove-right)
(global-set-key [M-up] 'windmove-up)
(global-set-key [M-down] 'windmove-down)

;跳转到函数定义
(global-set-key [f12] 'semantic-ia-fast-jump)
;跳转回去
(global-set-key [C-f12]
	(lambda ()
	(interactive)
	(if (ring-empty-p (oref semantic-mru-bookmark-ring ring))
	(error "Semantic Bookmark ring is currently empty"))
	(let* ((ring (oref semantic-mru-bookmark-ring ring))
	(alist (semantic-mrub-ring-to-assoc-list ring))
	(first (cdr (car alist))))
	(if (semantic-equivalent-tag-p (oref first tag)
	(semantic-current-tag))
	(setq frist (cdr (car (cdr alist)))))
	(semantic-mrub-switch-tags first))))
;加载(require 'eassist nil 'noerror)时，用于在cpp和h文件间的切换
(define-key c-mode-base-map [M-f12] 'eassist-switch-h-cpp)
;;===========================================================================
;;=============================== Others ====================================
;;===========================================================================
;; ahei的一些基本的小函数
(require 'ahei-misc)

;; 利用'eval-after-load'避免不必要的elisp包的加载，加快启动速度
(require 'eval-after-load)

(require 'util)

;;'mode-line'显示格式
(require 'mode-line-settings)

;;各种语言开发方面的设置
(require 'dev-settings)

;;color theme Emacs主题,很多face文件
(require 'color-theme-settings)
(require 'ahei-face)
(require 'color-theme-ahei)
(require 'face-settings)

;;diff
(require 'diff-settings)

;;Emacs的diff: ediff,有个my-fontest-win的文件很关键
(require 'ediff-settings)

;;在buffer中方便的查找字符串: color-moccur
(require 'moccur-settings)

;;Emacs超强的增量搜索Isearch配置
(require 'isearch-settings)

;;可以“所见即所得”的编辑一个文本模式的表格
(if is-before-emacs-21 (require 'table "table-for-21"))

;;把文件或buffer彩色输出成html
(require 'htmlize)

;;在文件头记录修改时间, 并动态更新
(require 'time-stamp-settings)

;;Emacs可以做为一个server, 然后用emacsclient连接这个server,无需再打开两个Emacs
(require 'emacs-server-settings)

(require 'apropos-settings)
(require 'completion-list-mode-settings)

;显示ascii表
(require 'ascii)

;;所有关于查看帮助方面的配置
(require 'all-help-settings)

;定义一些emacs 21没有的函数
(if is-before-emacs-21 (require 'for-emacs-21))

;;简写模式
(setq-default abbrev-mode t)
(setq save-abbrevs nil)

;;可以为重名的buffer在前面加上其父目录的名字来让buffer的名字区分开来，而不是单纯的加一个没有太多意义的序号
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;Emacs的超强文件管理器
(require 'dired-settings)

;方便的切换major mode
(defvar switch-major-mode-last-mode nil)

(defun major-mode-heuristic (symbol)
  (and (fboundp symbol)
       (string-match ".*-mode$" (symbol-name symbol))))

(defun switch-major-mode (mode)
  "切换major mode"
  (interactive
   (let ((fn switch-major-mode-last-mode) val)
     (setq val
           (completing-read
            (if fn (format "切换major-mode为(缺省为%s): " fn) "切换major mode为: ")
            obarray 'major-mode-heuristic t nil nil (symbol-name fn)))
     (list (intern val))))
  (let ((last-mode major-mode))
    (funcall mode)
    (setq switch-major-mode-last-mode last-mode)))
(global-set-key (kbd "C-x q") 'switch-major-mode)

(defun get-mode-name ()
  "显示`major-mode'及`mode-name'"
  (interactive)
  (message "major-mode为%s, mode-name为%s" major-mode mode-name))
(global-set-key (kbd "C-x m") 'get-mode-name)

;查看Emacs内进程
(autoload 'list-processes+ "list-processes+" "增强的`list-processes'命令" t)

(require 'view-mode-settings)

(defun revert-buffer-no-confirm ()
  "执行`revert-buffer'时不需要确认"
  (interactive)
  (when (buffer-file-name)
    (let ((emaci emaci-mode))
      (revert-buffer buffer-file-name t)
      (emaci-mode (if emaci 1 -1)))))
(eal-define-keys-commonly
 global-map
 `(("C-x u"   revert-buffer-no-confirm)
   ("C-x M-K" revert-buffer-with-gbk)
   ("C-x U"   revert-buffer-with-coding-system-no-confirm-sb)))

(defun count-brf-lines (&optional is-fun)
  "显示当前buffer或region或函数的行数和字符数"
  (interactive "P")
  (let (min max)
    (if is-fun
        (save-excursion
          (beginning-of-defun) (setq min (point))
          (end-of-defun) (setq max (point))
          (message "当前函数%s内共有%d行, %d个字符" (which-function) (count-lines min max) (- max min)))
      (if mark-active
          (progn
            (setq min (min (point) (mark)))
            (setq max (max (point) (mark))))
        (setq min (point-min))
        (setq max (point-max)))
      (if (or (= 1 (point-min)) mark-active)
          (if mark-active
              (message "当前region内共有%d行, %d个字符" (count-lines min max) (- max min))
            (message "当前buffer内共有%d行, %d个字符" (count-lines min max) (- max min)))
        (let ((nmin min) (nmax max))
          (save-excursion
            (save-restriction
              (widen)
              (setq min (point-min))
              (setq max (point-max))))
          (message "narrow下buffer内共有%d行, %d个字符, 非narrow下buffer内共有%d行, %d个字符"
                   (count-lines nmin nmax) (- nmax nmin) (count-lines min max) (- max min)))))))
(eal-define-keys-commonly
 global-map
 `(("C-x l" count-brf-lines)
   ("C-x L" (lambda () (interactive) (count-brf-lines t)))))

;;Emacs中的包管理器
(require 'package)
(package-initialize)

;; 在Emacs里面使用shell
(require 'term-settings)
(require 'multi-term-settings)

(defun goto-my-emacs-lisps-dir ()
  "Goto `my-emacs-lisps-path'."
  (interactive)
  (dired my-emacs-lisps-path))
(defun goto-my-emacs-my-lisps-dir ()
  "Goto `my-emacs-my-lisps-path'."
  (interactive)
  (dired my-emacs-my-lisps-path))
(defun goto-my-emacs-dir ()
  "Goto `my-emacs-path'."
  (interactive)
  (dired my-emacs-path))
(defun goto-my-home-dir ()
  "Goto my home directory."
  (interactive)
  (dired "~"))
(define-key-list
 global-map
 `(("C-x G l" goto-my-emacs-lisps-dir)
   ("C-x G m" goto-my-emacs-my-lisps-dir)
   ("C-x G e" goto-my-emacs-dir)
   ("C-x M-H" goto-my-home-dir)))

(define-key global-map (kbd "C-x M-c") 'describe-char)

(defun dos2unix ()
  "dos2unix on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'unix))

(defun unix2dos ()
  "unix2dos on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'dos))

(define-key global-map (kbd "C-x M-D") 'dos2unix)

(define-key-list
 global-map
 `(("C-x M-k" Info-goto-emacs-key-command-node)
   ("C-x ESC ESC" repeat-complex-command-sb)))

;大纲mode
(require 'outline-settings)

;字体配置
(require 'font-settings)

;显示行号
(require 'linum-settings)

;编码设置
(require 'coding-settings)

;启动时最大化
(require 'maxframe-settings)

;关闭buffer的时候, 如果该buffer有对应的进程存在, 不提示
(delq 'process-kill-buffer-query-function kill-buffer-query-functions)

;;王纯业的desktop, 比desktop快多了,保留上次关闭时的buffer
;;(require 'wcy-desktop-settings)

;;(require 'zjl-hl-settings)

{% endhighlight %}
